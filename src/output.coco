def makeOutput(data, results):
    # get the list of ice times for each team
    iceTimes = data |> fmap$((team, value) -> (team, value["ice-time"] |> fmap$(iceTime -> (iceTime["rink"], iceTime["time"]))))
    
    # find the details of each team that is playing, when & where
    playing = results["P"] |> .items() |> filter$((item) -> item[1] == 1) |> list \ # get only the games that are being played
        |> fmap$(item -> item[0]) \ # now that we know that the game is being played, get rid of the flag
        |> fmap$(item -> {"team": item[0], "rink": item[1][0], "time": item[1][1], "home": item[1] in iceTimes[item[0]]}) # get the data of who, where, & when those games are being played, and whether this team is the home team
    
    # group into games
    return playing |> groupby$(play -> (play["rink"], play["time"])) \ # associate any plays happening in the same place & time (a game)
        |> fmap$((k, g) -> (k, {"home": g[0]["team"] if g[0]["home"] else g[1]["team"], "away": g[1]["team"] if g[0]["home"] else g[0]["team"]})) # turn list of 2 plays into information about home & away teams

def formatOutput(output, formatter):
    return output |> .items() |> sorted$(key=game -> game[0][1]) \ # sort by time
        |> fmap$(game -> formatter(game[1]["home"], game[1]["away"], game[0][0], game[0][1])) # format using formatter

def describeGame(homeTeam, awayTeam, rink, time):
    return "{} host {} at rink {} on {}".format(homeTeam, awayTeam, rink, str(time))

def csvGame(homeTeam, awayTeam, rink, time):
    return ",".join([homeTeam, awayTeam, rink, str(time)])

################################################################################
# UTILITIES
################################################################################

def groupby(keyfunc, items):
    d = {}
    for item in items:
        key = keyfunc(item)
        d[key] = (d.setdefault(key, [])) + [item]
    return d