from pulp import *
from math import floor
import os

################################################################################
# MODEL
################################################################################

def solveModel(data):
    # get data
    sets = makeSets(data)
    values = makeValues(data, sets)
    
    variables = makeVariables(sets, values)
    (direction, objective) = makeObjective(sets, values, variables)
    constraints = makeConstraints(sets, values, variables)
    
    # make model
    model = LpProblem("Model", direction)
    model += objective
    for name, constraint in constraints.items():
        model += constraint, name
    
    # solve model
    solver = COIN_CMD(path=getCBCPath(), msg=0)
    model.solve(solver)
    
    print("Solver finished with status \"{}\".".format(describeStatus(model)))
    
    # get solution
    return variables |> fmap$((name, vs) -> (name, vs |> fmap$((index, variable) -> (index, value(variable)))))

def getCBCPath():
    dirname = os.path.dirname(__file__)
    
    # TODO: make dynamic
    return os.path.abspath(os.path.join(dirname, "../assets/osx/64/cbc"))

def describeStatus(model):
    if model.status == 0: return "solver has not finished running"
    elif model.status == 1: return "Optimal solution found"
    elif model.status == -1: return "The problem is infeasible"
    elif model.status == -2: return "The problem is unbounded"
    elif model.status == -3: return "The solution is undefined"

################################################################################
# SETS
################################################################################

def makeSets(data):
    # get teams
    teams = data |> .keys() |> set
    
    iceTimes = data |> .values() |> list |> fmap$(item -> item["ice-time"]) |> reduce$(+) |> fmap$(iceTime -> (iceTime["rink"], iceTime["time"]))
    
    return {
        "T": teams, # [team]
        "I": iceTimes, # [(rink, time)]
    }

################################################################################
# VALUES
################################################################################

def makeValues(data, sets):
    # get team home rink slots
    def home(team, iceTime):
        return {"rink": iceTime[0], "time": iceTime[1]} in data[team]["ice-time"]
    
    # get team slot availability
    def availability(team, iceTime):
        return iceTime[1].date() not in data[team]["unavailable"]
    
    # get time slot day indices
    earliestDay = sets["I"] |> fmap$(iceTime -> iceTime[1]) |> min
    days = sets["I"] |> fmap$(iceTime -> (iceTime, floor((iceTime[1] - earliestDay).days))) |> dict
    
    # get time slot week indices
    weeks = sets["I"] |> fmap$(iceTime -> (iceTime, floor(((iceTime[1] - earliestDay).days + earliestDay.weekday()) / 7))) |> dict
    
    return {
        "H": home, # (team, iceTime) -> Boolean
        "A": availability, # (team, iceTime) -> Boolean
        "D": days, # {iceTime: integer}
        "W": weeks # {iceTime: integer}
    }

################################################################################
# VARIABLES
################################################################################

def makeVariables(sets, values):
    T = sets["T"]
    I = sets["I"]
    
    # whether a team is playing at a given rink at a given time
    playing = LpVariable.dicts("P", [(t, i) for t in T for i in I], lowBound=0, cat=LpBinary)
    
    return {"P": playing}

################################################################################
# OBJECTIVE
################################################################################

def makeObjective(sets, values, variables):
    T = sets["T"]
    I = sets["I"]
    D = values["D"]
    P = variables["P"]
    
    return (LpMinimize, sum(P[(t, i)] * D[i] for t in T for i in I))

################################################################################
# CONSTRAINTS
################################################################################

def makeConstraints(sets, values, variables):
    T = sets["T"]
    I = sets["I"]
    H = values["H"]
    A = values["A"]
    D = values["D"]
    W = values["W"]
    P = variables["P"]
    
    # teams can only play 1 game per day, when available
    conservation = {"conservation[{},{}]".format(t, i): \
        sum(P[(t, n)] for n in I if D[n] == D[i]) <= A(t, i) for t in T for i in I}
    
    # a team can only host one other team at a time
    matchup = {"matchup[{},{}]".format(h, i): \
        P[(h, i)] == sum(P[(a, i)] for a in T if a != h) for h in T for i in I if H(h, i)}
    
    # each team must host each other team at least once
    robin = {"robin[{},{}]".format(h, a): \
        sum(P[(a, i)] for i in I if H(h, i)) >= 1 for h in T for a in T if h != a}
    
    # each team must play at least 3 games against each other team
    games = {"games[{},{}]".format(a,b): \
        sum(P[(a,i)] for i in I if H(b,i)) + sum(P[(b,i)] for i in I if H(a,i)) >= 3 for a in T for b in T}
    
    # each team can only play a maximum of 2 games per week
    covid = {"covid[{}]".format(i): \
        sum(P[(t, n)] for n in I if W[n] == W[i]) <= 2 for t in T for i in I}
    
    return {**conservation, **matchup, **games, **robin, **covid}
    